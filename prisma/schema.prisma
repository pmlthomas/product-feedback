// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model User {
  id            String  @id @default(uuid())
  email         String? @unique
  name          String
  username      String
  password      String
  feedbacks     Feedback[]
  comments      Comment[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ratings       Rating[]
  replies       Reply[] @relation("replyAuthor")
  repliedTo     Reply[] @relation("repliedTo")
}

model Category {
  id   String  @id @default(uuid())
  name String
  feedbacks Feedback[]
}

model Feedback {
  id          String @id @default(uuid())
  title       String
  description String @db.Text
  comments    Comment[]
  ratings     Rating[]
  createdAt   DateTime @default(now())
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  author      User @relation(fields: [authorId], references: [id])
  authorId    String
}

model Rating {
  id         String @id @default(uuid())
  author     User @relation(fields: [authorId], references: [id])
  authorId   String
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
}

model Comment {
  id          String  @id @default(uuid())
  feedback    Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId  String
  author      User @relation(fields: [authorId], references: [id])
  authorId    String
  replies     Reply[]
  commentText String @db.Text
  createdAt   DateTime @default(now())
}

model Reply {
    id          String  @id @default(uuid())
    replyText   String  @db.Text
    comment     Comment @relation(fields: [commentId], references: [id])
    commentId   String
    author      User    @relation("replyAuthor", fields: [authorId], references: [id])
    authorId    String
    repliedTo   User    @relation("repliedTo", fields: [repliedToId], references: [id])  
    repliedToId String
    createdAt   DateTime @default(now())
}