// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model User {
  id            String @id @default(cuid())
  email         String? @unique
  name      String
  username      String
  password      String
  feedbacks     Feedback[]
  comments      Comment[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Category {
  id String @id @default(cuid())
  name String
  feedbacks Feedback[]
}

model Feedback {
  id          String @id @default(cuid())
  category    Category @relation(fields: [categoryId], references: [id])
  author      User @relation(fields: [authorId], references: [id])
  authorId    String
  categoryId  String
  title       String
  description String
  rating      String
  comments    Comment[]
  createdAt   DateTime @default(now())
}

model Comment {
  id String @id @default(cuid())
  feedback Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
  author User @relation(fields: [authorId], references: [id])
  authorId String
  replies Reply[]
  commentText String @db.Text
}

model Reply {
    id String @id @default(cuid())
    comment Comment @relation(fields: [commentId], references: [id])
    commentId String
    replyText String @db.Text
}